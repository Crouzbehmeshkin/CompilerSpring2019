program -> declaration-list EOF
 declaration-list -> declaration-listB
 declaration-listB -> declaration declaration-listB | ε
 
 declaration -> var-declaration | fun-declaration
 var-declaration -> type-specifier ID var-declarationB
 var-declarationB -> ; | [ NUM ] ;
 

 type-specifier -> int | void
 fun-declaration -> type-specifier ID ( params ) compound-stmt
 params -> param-list | void

 param-list -> param param-listB
 param-listB -> , param param-listB | ε
 
 param -> type-specifier ID paramB
 paramB -> [ ] | ε
 

 compound-stmt -> { declaration-list statement-list }

 statement-list -> statement-listB
 statement-listB -> statement statement-listB | ε
 


 statement -> expression-stmt | compound-stmt | selection-stmt | iteration-stmt | return-stmt | switch-stmt

 expression-stmt -> expression ; | continue ; | break ; | ;
 selection-stmt -> if ( expression ) statement else statement
 iteration-stmt -> while ( expression ) statement
 return-stmt -> return return-stmtB
 return-stmtB -> ; | expression ;
 

 switch-stmt -> switch ( expression ) { case-stmts default-stmt }

 case-stmts -> case-stmtsB 
 case-stmtsB -> case-stmt case-stmtsB | ε
 
 case-stmt -> case NUM : statement-list
 default-stmt -> default : statement-list | ε
 expression -> var = expression | simple-expression
var -> ID varB
varB -> [ expression ] | ε


 simple-expression -> additive-expression  simple-expressionB
  simple-expressionB -> relop additive-expression  | ε
 


 relop -> < | ==
additive-expression -> term additive-expressionB
additive-expressionB -> addop term additive-expressionB | ε

 
addop->+|-

 term -> signed-factor termB
 termB -> * signed-factor termB | ε


 signed-factor -> factor | + factor | - factor
 factor -> ( expression ) | var | call | NUM
 call -> ID(args)
 args -> arg-list | ε

arg-list -> expression arg-listB
arg-listB -> , expression arg-listB | ε
